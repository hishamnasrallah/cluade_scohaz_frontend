// src/app/builder/services/code-generator.service.ts

import { Injectable } from '@angular/core';
import { ComponentConfig } from '../models/component-config.model';

@Injectable({
  providedIn: 'root'
})
export class CodeGeneratorService {

  generateHTML(components: ComponentConfig[]): string {
    if (components.length === 0) {
      return '<!-- No components to generate -->';
    }

    let html = `<!-- Generated by Angular Material Builder -->
<!-- Generated on: ${new Date().toLocaleString()} -->

<div class="generated-form">\n`;

    components.forEach((comp, index) => {
      html += this.generateComponentHTML(comp, index);
    });

    html += '</div>';
    return this.formatHTML(html);
  }

  private generateComponentHTML(comp: ComponentConfig, index: number): string {
    const attrs = this.getAttributes(comp);
    const indent = '  ';
    let html = '';

    // Add comment with component info
    html += `${indent}<!-- ${comp.name} (${comp.id}) -->\n`;

    switch (comp.id) {
      case 'mat_input':
        html += `${indent}<mat-form-field appearance="${attrs.appearance || 'outline'}" class="full-width">
${indent}  <mat-label>${attrs.label}</mat-label>
${indent}  <input matInput
${indent}         placeholder="${attrs.placeholder}"
${indent}         ${attrs.required ? 'required' : ''}
${indent}         ${attrs.disabled ? 'disabled' : ''}
${indent}         ${attrs.readonly ? 'readonly' : ''}
${indent}         [(ngModel)]="formData.field_${index}">
${indent}</mat-form-field>\n\n`;
        break;

      case 'mat_email':
        html += `${indent}<mat-form-field appearance="${attrs.appearance || 'outline'}" class="full-width">
${indent}  <mat-label>${attrs.label}</mat-label>
${indent}  <input matInput
${indent}         type="email"
${indent}         placeholder="${attrs.placeholder}"
${indent}         ${attrs.required ? 'required' : ''}
${indent}         [(ngModel)]="formData.email_${index}">
${indent}  <mat-icon matPrefix>email</mat-icon>
${indent}</mat-form-field>\n\n`;
        break;

      case 'mat_number':
        html += `${indent}<mat-form-field appearance="${attrs.appearance || 'outline'}" class="full-width">
${indent}  <mat-label>${attrs.label}</mat-label>
${indent}  <input matInput
${indent}         type="number"
${indent}         placeholder="${attrs.placeholder}"
${indent}         ${attrs.required ? 'required' : ''}
${indent}         ${attrs.min !== undefined ? `min="${attrs.min}"` : ''}
${indent}         ${attrs.max !== undefined ? `max="${attrs.max}"` : ''}
${indent}         ${attrs.step !== undefined ? `step="${attrs.step}"` : ''}
${indent}         [(ngModel)]="formData.number_${index}">
${indent}</mat-form-field>\n\n`;
        break;

      case 'mat_textarea':
        html += `${indent}<mat-form-field appearance="${attrs.appearance || 'outline'}" class="full-width">
${indent}  <mat-label>${attrs.label}</mat-label>
${indent}  <textarea matInput
${indent}            placeholder="${attrs.placeholder}"
${indent}            rows="${attrs.rows || 4}"
${indent}            ${attrs.required ? 'required' : ''}
${indent}            [(ngModel)]="formData.textarea_${index}"></textarea>
${indent}</mat-form-field>\n\n`;
        break;

      case 'mat_select':
        const options = this.parseOptions(attrs.options);
        html += `${indent}<mat-form-field appearance="${attrs.appearance || 'outline'}" class="full-width">
${indent}  <mat-label>${attrs.label}</mat-label>
${indent}  <mat-select ${attrs.required ? 'required' : ''} [(ngModel)]="formData.select_${index}">
${options.map(opt => `${indent}    <mat-option value="${opt.value}">${opt.label}</mat-option>`).join('\n')}
${indent}  </mat-select>
${indent}</mat-form-field>\n\n`;
        break;

      case 'mat_radio':
        const radioOptions = this.parseOptions(attrs.options);
        html += `${indent}<div class="radio-group-container">
${indent}  <label class="radio-group-label">${attrs.label}</label>
${indent}  <mat-radio-group ${attrs.required ? 'required' : ''} [(ngModel)]="formData.radio_${index}">
${radioOptions.map(opt => `${indent}    <mat-radio-button value="${opt.value}">${opt.label}</mat-radio-button>`).join('\n')}
${indent}  </mat-radio-group>
${indent}</div>\n\n`;
        break;

      case 'mat_checkbox':
        html += `${indent}<mat-checkbox ${attrs.required ? 'required' : ''}
${indent}              color="${attrs.color || 'primary'}"
${indent}              [(ngModel)]="formData.checkbox_${index}">
${indent}  ${attrs.label}
${indent}</mat-checkbox>\n\n`;
        break;

      case 'mat_slide_toggle':
        html += `${indent}<mat-slide-toggle ${attrs.required ? 'required' : ''}
${indent}                  color="${attrs.color || 'primary'}"
${indent}                  [(ngModel)]="formData.toggle_${index}">
${indent}  ${attrs.label}
${indent}</mat-slide-toggle>\n\n`;
        break;

      case 'mat_datepicker':
        html += `${indent}<mat-form-field appearance="${attrs.appearance || 'outline'}" class="full-width">
${indent}  <mat-label>${attrs.label}</mat-label>
${indent}  <input matInput
${indent}         [matDatepicker]="picker_${index}"
${indent}         placeholder="${attrs.placeholder}"
${indent}         ${attrs.required ? 'required' : ''}
${indent}         [(ngModel)]="formData.date_${index}">
${indent}  <mat-datepicker-toggle matIconSuffix [for]="picker_${index}"></mat-datepicker-toggle>
${indent}  <mat-datepicker #picker_${index}></mat-datepicker>
${indent}</mat-form-field>\n\n`;
        break;

      case 'mat_slider':
        html += `${indent}<div class="slider-container">
${indent}  <label class="slider-label">${attrs.label}</label>
${indent}  <mat-slider min="${attrs.min || 0}" max="${attrs.max || 100}" step="${attrs.step || 1}">
${indent}    <input matSliderThumb [(ngModel)]="formData.slider_${index}">
${indent}  </mat-slider>
${indent}  <span class="slider-value">{{ formData.slider_${index} }}</span>
${indent}</div>\n\n`;
        break;

      case 'mat_button':
        html += `${indent}<button mat-raised-button
${indent}        color="${attrs.color || 'primary'}"
${indent}        ${attrs.disabled ? 'disabled' : ''}
${indent}        (click)="onButtonClick('button_${index}')">
${indent}  ${attrs.icon ? `<mat-icon>${attrs.icon}</mat-icon>` : ''}
${indent}  ${attrs.label}
${indent}</button>\n\n`;
        break;

      case 'mat_card':
        html += `${indent}<mat-card>
${indent}  <mat-card-header>
${indent}    <mat-card-title>${attrs.title}</mat-card-title>
${indent}    ${attrs.subtitle ? `<mat-card-subtitle>${attrs.subtitle}</mat-card-subtitle>` : ''}
${indent}  </mat-card-header>
${indent}  <mat-card-content>
${indent}    <p>${attrs.content}</p>
${indent}  </mat-card-content>
${indent}</mat-card>\n\n`;
        break;

      case 'mat_divider':
        html += `${indent}<mat-divider ${attrs.inset ? 'inset' : ''} ${attrs.vertical ? 'vertical' : ''}></mat-divider>\n\n`;
        break;

      case 'mat_expansion_panel':
        html += `${indent}<mat-expansion-panel ${attrs.expanded ? 'expanded' : ''}>
${indent}  <mat-expansion-panel-header>
${indent}    <mat-panel-title>${attrs.title}</mat-panel-title>
${indent}    ${attrs.description ? `<mat-panel-description>${attrs.description}</mat-panel-description>` : ''}
${indent}  </mat-expansion-panel-header>
${indent}  <p>${attrs.content}</p>
${indent}</mat-expansion-panel>\n\n`;
        break;

      case 'mat_list':
        const listItems = this.parseOptions(attrs.items);
        html += `${indent}<mat-list ${attrs.dense ? 'dense' : ''}>
${listItems.map(item => `${indent}  <mat-list-item>${item.label}</mat-list-item>`).join('\n')}
${indent}</mat-list>\n\n`;
        break;

      case 'mat_chip':
        html += `${indent}<mat-chip color="${attrs.color || 'primary'}"
${indent}          ${attrs.removable ? 'removable' : ''}>
${indent}  ${attrs.label}
${indent}  ${attrs.removable ? '<mat-icon matChipRemove>cancel</mat-icon>' : ''}
${indent}</mat-chip>\n\n`;
        break;

      case 'mat_tabs':
        const tabs = this.parseOptions(attrs.tabs);
        html += `${indent}<mat-tab-group color="${attrs.color || 'primary'}">
${tabs.map(tab => `${indent}  <mat-tab label="${tab.label}">Content for ${tab.label}</mat-tab>`).join('\n')}
${indent}</mat-tab-group>\n\n`;
        break;

      case 'mat_stepper':
        const steps = this.parseOptions(attrs.steps);
        html += `${indent}<mat-stepper orientation="${attrs.orientation || 'horizontal'}">
${steps.map((step, i) => `${indent}  <mat-step label="${step.label}">
${indent}    <p>Content for ${step.label}</p>
${indent}    <button mat-button matStepperNext>Next</button>
${indent}  </mat-step>`).join('\n')}
${indent}</mat-stepper>\n\n`;
        break;

      default:
        html += `${indent}<!-- Unsupported component: ${comp.id} -->\n\n`;
    }

    return html;
  }

  private getAttributes(comp: ComponentConfig): any {
    const obj: any = {};
    for (const input of comp.inputs || []) {
      obj[input.name] = input.defaultValue;
    }
    return obj;
  }

  private parseOptions(optionsValue: any): Array<{ value: string; label: string }> {
    if (!optionsValue) return [];

    if (typeof optionsValue === 'string') {
      return optionsValue.split(',').map(opt => {
        const trimmed = opt.trim();
        return { value: trimmed, label: trimmed };
      });
    }

    if (Array.isArray(optionsValue)) {
      return optionsValue.map(opt => {
        if (typeof opt === 'string') {
          return { value: opt, label: opt };
        }
        return opt;
      });
    }

    return [];
  }

  private formatHTML(html: string): string {
    // Basic HTML formatting
    return html
      .replace(/>\s*</g, '>\n<')
      .replace(/\n\s*\n/g, '\n')
      .trim();
  }

  // Generate TypeScript component code
  generateTypeScriptComponent(components: ComponentConfig[]): string {
    const formFields = this.extractFormFields(components);

    return `import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-generated-form',
  templateUrl: './generated-form.component.html',
  styleUrls: ['./generated-form.component.scss']
})
export class GeneratedFormComponent implements OnInit {
  formData: any = {
${formFields.map(field => `    ${field}: ''`).join(',\n')}
  };

  constructor() { }

  ngOnInit(): void {
  }

  onButtonClick(buttonId: string): void {
    console.log('Button clicked:', buttonId);
    // Add your button click logic here
  }

  onSubmit(): void {
    console.log('Form submitted:', this.formData);
    // Add your form submission logic here
  }
}`;
  }

  private extractFormFields(components: ComponentConfig[]): string[] {
    const fields: string[] = [];

    components.forEach((comp, index) => {
      switch (comp.id) {
        case 'mat_input':
          fields.push(`field_${index}`);
          break;
        case 'mat_email':
          fields.push(`email_${index}`);
          break;
        case 'mat_number':
          fields.push(`number_${index}`);
          break;
        case 'mat_textarea':
          fields.push(`textarea_${index}`);
          break;
        case 'mat_select':
          fields.push(`select_${index}`);
          break;
        case 'mat_radio':
          fields.push(`radio_${index}`);
          break;
        case 'mat_checkbox':
          fields.push(`checkbox_${index}`);
          break;
        case 'mat_slide_toggle':
          fields.push(`toggle_${index}`);
          break;
        case 'mat_datepicker':
          fields.push(`date_${index}`);
          break;
        case 'mat_slider':
          fields.push(`slider_${index}`);
          break;
      }
    });

    return fields;
  }

  // Generate module imports
  generateModuleImports(): string {
    return `import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

// Angular Material Modules
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatRadioModule } from '@angular/material/radio';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatSliderModule } from '@angular/material/slider';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatCardModule } from '@angular/material/card';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatListModule } from '@angular/material/list';
import { MatChipsModule } from '@angular/material/chips';
import { MatTabsModule } from '@angular/material/tabs';
import { MatStepperModule } from '@angular/material/stepper';

@NgModule({
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatRadioModule,
    MatCheckboxModule,
    MatSlideToggleModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatSliderModule,
    MatButtonModule,
    MatIconModule,
    MatCardModule,
    MatDividerModule,
    MatExpansionModule,
    MatListModule,
    MatChipsModule,
    MatTabsModule,
    MatStepperModule
  ],
  exports: [
    // Export all modules
  ]
})
export class GeneratedFormModule { }`;
  }
}
